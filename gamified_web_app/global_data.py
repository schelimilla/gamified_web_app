leaderboard_data = [
    {'rank': 1, 'name': 'John', 'points': 100},
    {'rank': 2, 'name': 'Jane', 'points': 95},
    {'rank': 3, 'name': 'Alex', 'points': 83},
    {'rank': 4, 'name': 'Stacy', 'points': 80},
    {'rank': 5, 'name': 'YOU', 'points': 78},
    {'rank': 6, 'name': 'Mark', 'points': 40}
]

data_types_questions = [
    {"question_num": 1, "code": "water = \"blue\"", "question": "What is the data type of the variable water?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option1", "explanation": "I'm sorry, the correct answer is 'String'. The characters 'blue' are enclosed in double quotes, which indicates the variable is type String.", "point_value": 2},
    {"question_num": 2, "code": "x = 8.32", "question": "What is the data type of the variable x?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option3", "explanation": "I'm sorry, the correct answer is 'Float'. There are no quotes around 8.32, which means it is a number and not a String. Becuase there is a decimal point present, the data type is a Float.", "point_value": 2},
    {"question_num": 3, "code": "age = \"15\"", "question": "What is the data type of the variable age?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option1", "explanation": "I'm sorry, the correct answer is 'String'. Although 1 and 5 are numbers, notice they are enclosed within quotes. This means that they will simply be treated as characters and therefore the data type is a String.", "point_value": 3},
    {"question_num": 4, "code": "is_on = True", "question": "What is the data type of the variable is_on?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option4", "explanation": "I'm sorry, the correct answer is 'Boolean'. True is on of 2 possible values a boolean can take. It is not a number and there are no quotes around it, therefore, the data type is a Boolean.", "point_value": 2},
    {"question_num": 5, "code": "num = 12536", "question": "What is the data type of the variable num?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option2", "explanation": "I'm sorry, the correct answer is 'Integer'. There are no quotes around 12536, which means it is a number and not a String. Becuase there are no decimal points presents, the data type is an Integer.", "point_value": 2},
    {"question_num": 6, "code": "version = 2.0", "question": "What is the data type of the variable version?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option3", "explanation": "I'm sorry, the correct answer is 'Float'. There are no quotes around 2.0, which means it is a number and not a String. Becuase there is a decimal point present, the data type is a Float.", "point_value": 2},
    {"question_num": 7, "code": "is_cold = \"False\"", "question": "What is the data type of the variable is_cold?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option1", "explanation": "I'm sorry, the correct answer is 'String'. Notice that there are quotes around the characters False. This means that it is a String. If there were no quotes, then it would be a Boolean.", "point_value": 3},
]

string_methods_questions = [
    {"question_num": 1, "code": "word1 = \"let's\"<br> word2 = \"party\"<br> print(word1 + word2) ", "question": "What is displayed in the console?", "answer_choices": ["\"party\"", "let's party", "let'sparty", "Cannot concatenate"], "correct_answer":"option3", "explanation": "I'm sorry, the correct answer is 'let'sparty'. Since both variables are strings, they can be conatenated. We simply put the values of the two variables next to each other, which becomes 'let'sparty' with no spaces. Remember that we manually have to concatenate the space string " " if we want a space in the middle.", "point_value": 2},
    {"question_num": 2, "code": "x = \"3\"<br> y = \"5\"<br> print(x + y)", "question": "What is displayed in the console?", "answer_choices": ["8", "35", "15", "Cannot Concatenate"], "correct_answer":"option2", "explanation": "I'm sorry, the correct answer is '35'. Notice that x and y are both strings, meaning they are not numerical values with mathematical properties. They are simply string characters. So, concatenating \"3\" and \"5\" will give '35'.", "point_value": 3},
    {"question_num": 3, "code": "fruit = \"watermelon\"<br> fruit = fruit[5:10]<br> print(fruit)", "question": "What is displayed in the console?", "answer_choices": ["rmelo", "elon", "melon", "Error Message"], "correct_answer":"option3", "explanation": "I'm sorry, the correct answer is 'melon'. If you draw a little chart with each letter of 'watermelon' corresponding to an index, you'll see that 'm' is at index 5 and 'n' is at index 9. Remember that the starting index is inclusive and the ending index is exclusive.", "point_value": 3},
    {"question_num": 4, "code": "fruit = \"papaya\"<br> fruit = fruit[0:5:2]<br> print(fruit)", "question": "What is displayed in the console?", "answer_choices": ["ppy", "aaa", "pap", "Error Message"], "correct_answer":"option1", "explanation": "I'm sorry, the correct answer is 'ppy'. If you draw a little chart with each letter of 'papaya' corresponding to an index, you'll see that the first 'p' is at index 0 and 'y' is at index 4. The last parameter in the index indicates the value we jump by, so in this case we are indexing alternate characters starting from 'p' and ending at 'y', which is 'ppy'.", "point_value": 4},
    {"question_num": 5, "code": "fav_fruit = mango<br> l = len(fav_fruit)<br> print(l)", "question": "What is displayed in the console?", "answer_choices": ["mango", "1", "4", "5"], "correct_answer":"option4", "explanation": "I'm sorry, the correct answer is '5'. There are 5 characters (letters) in mango, therefore, the len method returns '5'.", "point_value": 2},
    {"question_num": 6, "code": "object = \"eRAsor\"<br> object = object.lower()<br> print(object)", "question": "What is displayed in the console?", "answer_choices": ["eRAsor", "ERASOR", "erasor", "EraSOR"], "correct_answer":"option3", "explanation": "I'm sorry, the correct answer is 'y'. Since we \"pa\" was passed into the strip method, it will remove all combinations of \"pa\" at the start and end of the string \"papaya\". Combinations include 'p', 'a', 'pa', 'ap', 'paa', 'app', etc. Therefore, 'papa' is removed from the start of the string and 'a' is removed from the end of the string leaving 'y' as the answer.", "point_value": 4},
    {"question_num": 7, "code": "fruit = \"papaya\"<br> fruit = fruit.strip(\"pa\")<br> print(fruit)", "question": "What is displayed in the console?", "answer_choices": ["papaya", "paya", "ya", "y"], "correct_answer":"option4", "explanation": "I'm sorry, the correct answer is 'String'. Notice that there are quotes around the characters False. This means that it is a String. If there were no quotes, then it would be a Boolean.", "point_value": 3},
    {"question_num": 8, "code": "favorite = \"I love strawberries\"<br> favorite = favorite.replace(\"strawberries\", \"mangoes\")<br> print(favorite)", "question": "What is displayed in the console?", "answer_choices": ["mangoes", "I love mangoes", "strawberries", "I love strawberries"], "correct_answer":"option2", "explanation": "I'm sorry, the correct answer is 'I love mangoes'. The replace method replaces the first argument with the second argument wherever it sees the first argument in the given string. Therefore, 'strawberries' is replaced with 'mangoes', making the string favorite equal to 'I love mangoes'", "point_value": 2},
    {"question_num": 9, "code": "favorite = \"I love strawberries\"<br> favorite = favorite.find(\"love\")<br> print(favorite)", "question": "What is displayed in the console", "answer_choices": ["2", "3", "5", "-1"], "correct_answer":"option1", "explanation": "I'm sorry, the correct answer is '2'. If you draw a little chart with each letter of 'I love strawberries' corresponding to an index, you'll see that 'l' is at index 2. Remember that the find method returns the index of the first character of the string it is trying to find. So in this case, it will return the index of 'l', which is 2.", "point_value": 3},
    {"question_num": 10, "code": "\"I love strawberries\"<br> favorite = favorite.find(\"straws\")<br> print(favorite)", "question": "What is displayed in the console?", "answer_choices": ["7", "8", "11", "-1"], "correct_answer":"option4", "explanation": "I'm sorry, the correct answer is '-1'. Remember that the find method returns -1 if it cannot find the given the string. In this example, we are trying to find the string 'straws' in the string 'I love strawberries'. Notice that the string 'straws' does not exist, therefore -1 is returned.", "point_value": 3},
    {"question_num": 11, "code": "lucky_num = input(\"Enter your lucky number: \")<br> *Suppose user types in 89<br> print(lucky_num)", "question": "What is displayed in the console?", "answer_choices": ["8", "89", "9", "Error"], "correct_answer":"option2", "explanation": "I'm sorry, the correct answer is '89'. Remember that the input method stores whatever the user enters as a string in the variable is being set equal to, in this case 'lucky_num'. Therefore, since the user entered '89', that value will now be stored in 'lucky_num'.", "point_value": 2},
    {"question_num": 12, "code": "lucky_num = input(\"Enter your lucky number: \")<br> *Suppose user types in 89<br> print(lucky_num)", "question": "What is the data type of lucky_num?", "answer_choices": ["String", "Integer", "Float", "Boolean"], "correct_answer":"option1", "explanation": "I'm sorry, the correct answer is 'String'. Remember that the input method stores whatever the user enters as a string in the variable is being set equal to, in this case 'lucky_num'. Therefore, 'lucky_num' will store the string \"89\".", "point_value": 3}
]
